/********************************************************************
 *  Copyright (c) 2011-2020, MengFei.                               *
 *  All Rights Reserved.                                            *
 *------------------------------------------------------------------*
 *  File Name:                                                      *
 *  Abstract :                                                      *
 *------------------------------------------------------------------*
 *  Author   :  MengFei                                             *
 *  Version  :  1.0                                                 *
 *  Creation :  2011/01/02                                          *
 *------------------------------------------------------------------*
 *  Modify:                                                         *
 *      Date    Version         Contents                            *
 *                                                                  *
 ********************************************************************/

#ifndef __ANY_H__
#define __ANY_H__

#include "Any/Any.h"
#include "Any/Any_App.h"
#include "Any/Any_Module.h"
#include "Any/Any_MsgHandler.h"
#include "Any/Any_Translator.h"
#include "Any/Any_Task.h"
#include "GC/GC_Semaphore.h"

#include "Any_Error.h"
#include "Any_Msg.h"
#include "Any_Size.h"

#define DB_TYPE_ORACLE      "ORACLE"
#define DB_TYPE_DB2         "DB2"
#define DB_TYPE_MYSQL       "MYSQL"
#define DB_TYPE_SQLSERVER   "SQLSERVER"
#define DB_TYPE_MSSQL       "MSSQL"
#define DB_TYPE_ODBC        "ODBC"

#pragma pack(push, 1)

#define ANY_ATTACH_MSG_TO_APP(sAppName, nMsgId)             \
    static inline const char* MsgApp() { return sAppName; } \
    static inline UINT        MsgId()  { return nMsgId; }

#define ANY_MSG_STRUCT_INIT(ClassName, sAppName, nMsgId)    \
    ANY_ZEROINIT_CONSTRUCTOR(ClassName);                    \
    ANY_ATTACH_MSG_TO_APP(sAppName, nMsgId);

struct TAnyMsg
{
    ANY_MSG_STRUCT_INIT(TAnyMsg, "", GC_MSG_NULL);
};

typedef TAnyMsg TAnyRequest;

struct TAnyResponse : public TAnyMsg
{
    int   nErrorCode;
    char* sErrorStr;    // Note: Never use this directly, use ErrorMsg().
    char* ErrorMsg(){ sErrorStr = (char*)ANY_ErrStr(nErrorCode); return sErrorStr; }
    ANY_ZEROINIT_CONSTRUCTOR(TAnyResponse);
};

typedef TAnyRequest   ANY_Req, TReq;
typedef TAnyResponse  ANY_Res, TRes;

struct ANY_Session
{
    TSID    CustomerSid;
    UINT    CustomerMsgId;
    TAPPID  CustomerAppId;

    void CacheIpcHeader(const CIpcData& ipcData)
    {
        CustomerSid   = ipcData.SID;
        CustomerMsgId = ipcData.Src.MsgId;
        CustomerAppId = ipcData.Src.AppId;
    }
    ANY_ZEROINIT_CONSTRUCTOR(ANY_Session)
};

typedef ANY_Session  ANY_SSN;

#pragma pack(pop)

#define ANY_MSG_STRUCT(Type)            struct Type
#define ANY_MSG_STRUCT_REQ(Type, ...)   struct Type : public TReq
#define ANY_MSG_STRUCT_RES(Type, ...)   struct Type : public TRes

#define ANY_ErrorResponse(resType, errCode, msgId, sid, dstAppId)           \
    {                                                                       \
    resType res;                                                            \
    res.nErrorCode = errCode;                                               \
    LOG(LOG_LOG, "[ANY-ErrRes] - %s result: %d, %s.", __FUNCNAME__, errCode, ANY_ErrStr(errCode));   \
    SendMsgEx(msgId, GC_MSG_NULL, &res, sizeof(res), sid, dstAppId);        \
    }

#define ANY_ErrorResponseEx(pktCode, errCode, msgId, sid, dstAppId)         \
    {                                                                       \
    CPacket packetRes;                                                      \
    packetRes.Create(pktCode);                                              \
    packetRes.AddAttr(CPacket::AT_ERROR_CODE, errCode);                     \
    packetRes.Encode();                                                     \
    int nLength = 0;                                                        \
    const byte* pBuf = packetRes.GetPacket(nLength);                        \
    LOG(LOG_LOG, "[ANY-ErrRes] - %s result: %d, %s.", __FUNCNAME__, errCode, ANY_ErrStr(errCode));   \
    SendMsgEx(msgId, GC_MSG_NULL, (void*)pBuf, nLength, sid, dstAppId);     \
    }


#endif //__ANY_H__
